---
title: "prac5"
format: html
editor: visual
---

# 读取数据

```{r}
library(sf)
#
Londonborough <- st_read(here::here("wk5","statistical-gis-boundaries-london", "ESRI", "London_Borough_Excluding_MHW.shp"))%>%
  st_transform(., 27700) #英国国家坐标系（British National Grid）的 EPSG 代码
```

# 空间连接

## st_join函数

```{r}
OSM <- st_read(here::here("wk5",
                          "greater-london-latest-free.shp", 
                          "gis_osm_pois_a_free_1.shp")) %>%
  st_transform(., 27700) %>%
  #select hotels only
  dplyr::filter(fclass == 'hotel')
```

```{r}
join_example <-  st_join(Londonborough, OSM)

head(join_example)
```

# 静态地图

## 加载数据

### osm底图

```{r}
library(sf)
library(tmap)
library(tmaptools)
library(tidyverse)
library(here)

# read in all the spatial data and 
# reproject it 

OSM <- st_read(here::here("wk5",
                          "greater-london-latest-free.shp", 
                          "gis_osm_pois_a_free_1.shp")) %>%
  st_transform(., 27700) %>%
  #select hotels only
  filter(fclass == 'hotel')
```

### 世界主要城市

```{r}
Worldcities <- st_read(here::here("wk5", 
                                  "World_Cities", 
                                  "World_Cities.shp")) %>%
  st_transform(., 27700)
```

### uk边界

```{r}
UK_outline <- st_read(here::here("wk5", 
                                 "gadm41_GBR_shp", 
                                 "gadm41_GBR_0.shp")) %>%
  st_transform(., 27700)
```

### 伦敦边界

```{r}
#London Borough data is already in 277000
Londonborough <- st_read(here::here("wk5","statistical-gis-boundaries-london", "ESRI", "London_Borough_Excluding_MHW.shp"))%>%
  st_transform(., 27700)
```

### 酒店数据，转换为空间数据

```{r}
Airbnb <- read_csv("listings.csv") %>%
  # longitude is considered x value here, latitude is y
  st_as_sf(., coords = c("longitude", "latitude"), 
                   crs = 4326) %>%
    st_transform(., 27700)%>%
    #select entire places that are available all year
    filter(room_type == 'Entire home/apt' & availability_365 =='365')
```

## 自定义连接函数

```{r}
Joinfun <- function(data1, data2){

output<- data1%>%
  st_join(data2,.) %>%
  add_count(GSS_CODE, name="hotels_in_borough") 

  return(output)
}
```

### 利用函数

```{r}
Hotels <- Joinfun(OSM, Londonborough)
Airbnb <- Joinfun(Airbnb, Londonborough)
```

```{r}
Worldcities2 <- Worldcities %>%
  filter(CNTRY_NAME=='United Kingdom'&
           Worldcities$CITY_NAME=='Birmingham'|
           Worldcities$CITY_NAME=='London'|
           Worldcities$CITY_NAME=='Edinburgh')

newbb <- c(xmin=-296000, ymin=5408, xmax=655696, ymax=1000000)
  
UK_outlinecrop <- UK_outline$geometry %>%
  st_crop(., newbb)

Hotels <- Hotels %>%
  #at the moment each hotel is a row for the borough
  #we just one one row that has number of airbnbs
  group_by(., GSS_CODE, NAME)%>%
  summarise(`Accomodation count` = unique(hotels_in_borough))

Airbnb <- Airbnb %>%
  group_by(., GSS_CODE, NAME)%>%
  summarise(`Accomodation count` = unique(hotels_in_borough))
```

```{r}
Airbnb %>%
  filter(NAME=="Sutton")
```

## 绘制地图

```{r}
tmap_mode("plot") # 静态图模式

# set the breaks
# for our mapped data
breaks = c(0, 5, 12, 26, 57, 286) # 设置断点

# plot each map
tm1 <- tm_shape(Hotels) + 
  tm_polygons("Accomodation count", 
              breaks=breaks,
              palette="PuBu")+
  tm_legend(show=FALSE)+ # 隐藏图例
  tm_layout(frame=FALSE)+ # 隐藏地图边框
  tm_credits("(a)", position=c(0,0.85), size=1.5) # 添加文本(a)

tm2 <- tm_shape(Airbnb) + 
  tm_polygons("Accomodation count",
              breaks=breaks, 
              palette="PuBu") + 
  tm_legend(show=FALSE)+
  tm_layout(frame=FALSE)+
  tm_credits("(b)", position=c(0,0.85), size=1.5)

tm3 <- tm_shape(UK_outlinecrop)+ 
  tm_polygons(col="darkslategray1")+
  tm_layout(frame=FALSE)+
  tm_shape(Worldcities2) + # 添加 Worldcities2 数据集作为第二层空间数据，表示世界城市的位置
  tm_symbols(col = "red", scale = .5)+
  tm_text("CITY_NAME", xmod=-1, ymod=-0.5)

legend <- tm_shape(Hotels) +
    tm_polygons("Accomodation count",
                breaks=breaks,
                palette="PuBu") +
    tm_scale_bar(position=c(0.2,0.04), text.size=0.6)+ # 比例尺
    tm_compass(north=0, position=c(0.65,0.6))+ # 指南针
    # 只显示图例，不绘制完整地图 
    tm_layout(legend.only = TRUE,
              legend.position=c(0.2,0.25),asp=0.1)+
    # 添加文字说明
    tm_credits("(c) OpenStreetMap contrbutors and Air b n b",  position=c(0.0,0.0))

# 将多个 tmap 地图对象组合成一个整体，列数为2
t=tmap_arrange(tm1, tm2, tm3, legend, ncol=2)

t
```

```{r}
# 用 grid 包手动控制地图对象的布局位置和尺寸
library(grid)
# erases the current device or moves to a new page 
# probably not needed but makes sure you are plotting on a new page.
grid.newpage()

pushViewport(viewport(layout=grid.layout(2,2)))
print(tm1, vp=viewport(layout.pos.col=1, layout.pos.row=1, height=5))
print(tm2, vp=viewport(layout.pos.col=2, layout.pos.row=1, height=5))
print(tm3, vp=viewport(layout.pos.col=1, layout.pos.row=2, height=5))
print(legend, vp=viewport(layout.pos.col=2, layout.pos.row=2, height=5))
```

# 插图

```{r}
# st_bbox() 函数计算 Airbnb数据集的边界框，即该数据集覆盖的最小矩形区域。
# crs = st_crs(Airbnb) 确保新创建的边界框使用与 Airbnb 相同的坐标参考系（CRS）
Londonbb <- st_bbox(Airbnb,
                    crs = st_crs(Airbnb))%>%
  #we need this to convert it into a class of sf
  # otherwise it our bb won't have a class it will just be x and y coordinates for the box
  # st_as_sfc() 将边界框转换为一个实际的多边形
  st_as_sfc()
```

```{r}
main <- tm_shape(Airbnb, bbbox = Londonbb) + # 限定边框为Londonbb
  tm_polygons("Accomodation count",
              breaks=breaks, 
              palette="PuBu")+
  tm_scale_bar(position = c("left", "bottom"), text.size = .75)+
  tm_layout(legend.position = c("right","top"), 
            legend.text.size=.75, 
            legend.title.size = 1.1,
            frame=FALSE)+
  tm_credits("(c) OpenStreetMap contrbutors and Air b n b", position=c(0.0,0.0))+
  #tm_text(text = "NAME", size = .5, along.lines =T, remove.overlap=T,  auto.placement=F)+
  tm_compass(type = "8star", position = c(0.06, 0.1)) +

  #bottom left top right
  # 定义内部四边边距（上，右，下，左）
  tm_layout(inner.margin=c(0.02,0.02,0.02,0.2)) 
```

```{r}
# 定义inset（透明底灰色填充英国地图）
inset = tm_shape(UK_outlinecrop) + tm_polygons() +
  tm_shape(Londonbb)+ 
  tm_borders(col = "grey40", lwd = 3)+
    tm_layout(frame=FALSE,
            bg.color = "transparent")+
  tm_shape(Worldcities2) +
  tm_symbols(col = "red", scale = .5)+
  tm_text("CITY_NAME", xmod=-1.5, ymod=-0.5)
```

```{r}
library(grid)
main
# 在主要地图旁边或下方插入inset作为插图
# viewport参数指定插图的位置和大小
print(inset, vp = viewport(0.86, 0.29, width = 0.5, height = 0.55))
```

# 导出地图

```{r}
# 保存t地图的png
tmap_save(t, 'hotelsandairbnbR.png')

# 保存main和插图的pdf
library(grid)
tmap_save(main,insets_tm = inset,insets_vp=viewport(x=0.86, y=0.29, width=.5, height=.55), filename="test.pdf", dpi=600)
```

# 交互式地图

## 基本交互

```{r}
tmap_mode("view") # 交互模式

tm_shape(Airbnb) + 
  tm_polygons("Accomodation count", breaks=breaks) 
```

## 高级交互

```{r}
# library for pop up boxes弹出框
library(leafpop)
library(leaflet)
library(sf)
library(tmap)

#join data
# 空间连接Airbnb和Hotels数据
Joined <- Airbnb%>%
  st_join(., Hotels, join = st_equals)%>%
  # 选择列
  dplyr::select(GSS_CODE.x, NAME.x, `Accomodation count.x`, `Accomodation count.y`)%>%
  # 重命名列
  dplyr::rename(`GSS code` =`GSS_CODE.x`,
                `Borough` = `NAME.x`,
                `Airbnb count` = `Accomodation count.x`,
                `Hotel count`= `Accomodation count.y`)%>%
  st_transform(., 4326) # 转换为WGS84坐标系
  
  
#remove the geometry for our pop up boxes to avoid
# 创建弹出框显示Airbnb数据
popupairbnb <-Joined %>%
  st_drop_geometry()%>% # 去掉几何信息，仅保留数据属性
  dplyr::select(`Airbnb count`, Borough)%>% # 选择弹出框的显示列
  popupTable() # 创建一个弹出框信息的表格

# 创建弹出框显示Hotels数据
popuphotel <-Joined %>%
  st_drop_geometry()%>%
  dplyr::select(`Hotel count`, Borough)%>%
  popupTable()

tmap_mode("view") # 交互模式

# set the colour palettes using our previously defined breaks

# 定义颜色调色板
# pal1的两种定义模式
pal1 <- Joined %>%
  colorBin(palette = "YlOrRd", domain=.$`Airbnb count`, bins=breaks)

# colorBin()：用于创建颜色分级
# domain 是数据的范围，bins 是颜色分段的边界
pal1 <-colorBin(palette = "YlOrRd", domain=Joined$`Airbnb count`, bins=breaks)

pal2 <- Joined %>%
  colorBin(palette = "YlOrRd", domain=.$`Hotel count`, bins=breaks)


map<- leaflet(Joined) %>%

  #add our polygons, linking to the tables we just made
  # 添加多边形图层
  addPolygons(color="white", # 边界颜色
              weight = 2, # 边界宽度
              opacity = 1, # 边界透明度
              dashArray = "3", # 边界样式为虚线
              popup = popupairbnb, # 弹出框内容
              fillOpacity = 0.7, # 多边形填充透明度
              fillColor = ~pal2(`Airbnb count`), # 填充颜色
              group = "Airbnb")%>% # 多边形图层放到Airbnb组中
  
  addPolygons(fillColor = ~pal2(`Hotel count`), 
              weight = 2,
              opacity = 1,
              color = "white",
              dashArray = "3",
              popup = popuphotel,
              fillOpacity = 0.7,group = "Hotels")%>%
  
  #add basemaps
  # 添加osm底图
  addTiles(group = "OSM (default)") %>%
  # 三种底图风格
  addProviderTiles(providers$Stadia.StamenToner, group = "Toner") %>%
  addProviderTiles(providers$Stadia.StamenTonerLite, group = "Toner Lite") %>%
  addProviderTiles(providers$CartoDB.Positron, group = "CartoDB")%>%
  
  # add a legend
  # 添加图例
  addLegend(pal = pal2, values = ~`Hotel count`, group = c("Airbnb","Hotel"), 
            position ="bottomleft", title = "Accomodation count") %>%
  # specify layers control
  # 添加图层控制面板，允许用户选择和切换不同的底图和叠加图层
  addLayersControl(
    baseGroups = c("OSM (default)", "Toner", "Toner Lite", "CartoDB"),
    overlayGroups = c("Airbnb", "Hotels"),
    options = layersControlOptions(collapsed = FALSE)
  )

# plot the map
map
```
